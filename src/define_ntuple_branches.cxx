vll_helpers::MyReaderValue<float> generator_weight(!is_data,reader,"generatorWeight",readsystematic,true,true,1.0);
vll_helpers::MyReaderValue<float> VLL_weight(!is_data,reader,"VLL_weight",readsystematic,false,true,1.0);
vll_helpers::MyReaderValue<float> pileup_weight(!is_data,reader,"pileupWeight",readsystematic,true,true,1.0);
vll_helpers::MyReaderValue<float> trig_global_sf(!is_data && !is_signal,reader,"trigGlobalSF",readsystematic,true,true,1.0);
vll_helpers::MyReaderValue<unsigned int> mc_channel_number(!is_data,reader,"mcChannelNumber",readsystematic,false,true,0);
vll_helpers::MyReaderArray<double> MET(true,reader,"met",readsystematic,true,false);
vll_helpers::MyReaderArray<float> METsig(true,reader,"met_significance",readsystematic,true,false);
vll_helpers::MyReaderArray<double> METphi(true,reader,"met_phi",readsystematic,true,false);
vll_helpers::MyReaderArray<float> el_pt(true,reader,"el_pt",readsystematic,true,false);
vll_helpers::MyReaderArray<float> el_eta(true,reader,"el_eta",readsystematic,false,false);
vll_helpers::MyReaderArray<float> el_phi(true,reader,"el_phi",readsystematic,false,false);
vll_helpers::MyReaderArray<float> el_charge(true,reader,"el_charge",readsystematic,false,false);
vll_helpers::MyReaderArray<char> el_likelihood(true,reader,"el_likelihood_Tight",readsystematic,false,false);
vll_helpers::MyReaderArray<char> el_isIsolated(true,reader,"el_isIsolated_FCLoose",readsystematic,true,false);
vll_helpers::MyReaderArray<float> el_effSF_reco(!is_data,reader,"el_effSF_Reco",readsystematic,true,true,1.0);
vll_helpers::MyReaderArray<float> el_effSF_PID(!is_data,reader,"el_effSF_PID_Tight",readsystematic,true,true,1.0);
vll_helpers::MyReaderArray<float> el_effSF_isol(!is_data,reader,"el_effSF_Isol_Tight_FCLoose",readsystematic,true,true,1.0);
vll_helpers::MyReaderArray<float> el_effSF_chflip(!is_data,reader,"el_effSF_Chflip_Tight_FCLoose",readsystematic,true,true,1.0);
vll_helpers::MyReaderArray<unsigned int> el_truthClassification(!is_data,reader,"el_truthClassification",readsystematic,false,false,2);
vll_helpers::MyReaderArray<float> mu_pt(true,reader,"mu_pt",readsystematic,true,false);
vll_helpers::MyReaderArray<float> mu_eta(true,reader,"mu_eta",readsystematic,false,false);
vll_helpers::MyReaderArray<float> mu_phi(true,reader,"mu_phi",readsystematic,false,false);
vll_helpers::MyReaderArray<float> mu_charge(true,reader,"mu_charge",readsystematic,false,false);
vll_helpers::MyReaderArray<char> mu_isIsolated(true,reader,"mu_isIsolated_TightTrackOnly_VarRad",readsystematic,true,false);
vll_helpers::MyReaderArray<float> mu_effSF_reco(!is_data,reader,"mu_effSF_Reco",readsystematic,true,true,1.0);
vll_helpers::MyReaderArray<float> mu_effSF_TTVA(!is_data,reader,"mu_effSF_TTVA",readsystematic,true,true,1.0);
vll_helpers::MyReaderArray<float> mu_effSF_isol(!is_data,reader,"mu_effSF_Isol_TightTrackOnly_VarRad",readsystematic,true,true,1.0);
vll_helpers::MyReaderArray<unsigned int> mu_truthClassification(!is_data,reader,"mu_truthClassification",readsystematic,false,false,4);
vll_helpers::MyReaderArray<float> tau_pt(true,reader,"tau_pt",readsystematic,true,false);
vll_helpers::MyReaderArray<float> tau_eta(true,reader,"tau_eta",readsystematic,true,false);
vll_helpers::MyReaderArray<float> tau_phi(true,reader,"tau_phi",readsystematic,true,false);
vll_helpers::MyReaderArray<float> tau_charge(true,reader,"tau_charge",readsystematic,true,false);
vll_helpers::MyReaderArray<char> tau_isMedium(true,reader,"tau_isMedium",readsystematic,true,false);
vll_helpers::MyReaderArray<float> tau_effSF_Base(!is_data,reader,"tau_effSF_Base",readsystematic,true,true,1.0);
vll_helpers::MyReaderArray<float> tau_effSF_Medium(!is_data,reader,"tau_effSF_Medium",readsystematic,true,true,1.0);
vll_helpers::MyReaderArray<float> tau_RNNJetScoreSigTrans(true,reader,"tau_RNNJetScoreSigTrans",readsystematic,true,false);
vll_helpers::MyReaderArray<char> tau_EleBDT(true,reader,"tau_BDTEleTight",readsystematic,true,false);
vll_helpers::MyReaderArray<unsigned long> tau_nTracks(true,reader,"tau_nTracks",readsystematic,true,false);
vll_helpers::MyReaderArray<int> tau_passEleOLR(true,reader,"tau_PassEleOLR",readsystematic,true,false);
vll_helpers::MyReaderArray<unsigned int> tau_truthClassification(!is_data,reader,"tau_truthClassification",readsystematic,true,false,0);
vll_helpers::MyReaderArray<float> tau_effSF(!is_data,reader,"tau_effSF_Medium",readsystematic,true,false,1.0);
vll_helpers::MyReaderArray<float> jet_pt(true,reader,"jet_pt",readsystematic,true,false);
vll_helpers::MyReaderArray<float> jet_eta(true,reader,"jet_eta",readsystematic,false,false);
vll_helpers::MyReaderArray<float> jet_phi(true,reader,"jet_phi",readsystematic,false,false);
vll_helpers::MyReaderArray<float> jet_m(true,reader,"jet_m",readsystematic,false,false);
vll_helpers::MyReaderArray<char> jet_btag(true,reader,"jet_FTag_DL1r_FixedCutBEff_77",readsystematic,true,false);
vll_helpers::MyReaderValue<float> jet_btag_eff(!is_data,reader,"FTagEfficiency_DL1r_FixedCutBEff_77",readsystematic,true,true,1.0);
vll_helpers::MyReaderArray<float> jet_jvt_eff(!is_data,reader,"JVTEfficiency",readsystematic,true,true,1.0);
std::vector<TTreeReaderValue<bool>> ee_trigs_passed;
ee_trigs_passed.emplace_back(reader,"trigPassed_HLT_2e12_lhloose_L12EM10VH");
ee_trigs_passed.emplace_back(reader,"trigPassed_HLT_2e17_lhvloose_nod0");
ee_trigs_passed.emplace_back(reader,"trigPassed_HLT_2e17_lhvloose_nod0_L12EM15VHI");
ee_trigs_passed.emplace_back(reader,"trigPassed_HLT_2e24_lhvloose_nod0");
std::vector<TTreeReaderValue<bool>> mm_trigs_passed;
mm_trigs_passed.emplace_back(reader,"trigPassed_HLT_mu22_mu8noL1");
mm_trigs_passed.emplace_back(reader,"trigPassed_HLT_mu18_mu8noL1");
std::vector<TTreeReaderValue<bool>> em_trigs_passed;
em_trigs_passed.emplace_back(reader,"trigPassed_HLT_e17_lhloose_nod0_mu14");
em_trigs_passed.emplace_back(reader,"trigPassed_HLT_e17_lhloose_mu14");
